package net.d_ichi84.GL_test.GL.model;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;


import android.util.FloatMath;

import net.d_ichi84.GL_test.game.WorldRenderer;
import net.d_ichi84.framework.DynamicGameObject3D;
import net.d_ichi84.framework.android.AndroidFileIO;
import net.d_ichi84.framework.gl.Animation;
import net.d_ichi84.framework.gl.GLGame;
import net.d_ichi84.framework.gl.GLGraphics;
import net.d_ichi84.framework.gl.SpriteBatcher;
import net.d_ichi84.framework.gl.Texture;
import net.d_ichi84.framework.gl.TextureRegion;
import net.d_ichi84.framework.math.Vector2;
import net.d_ichi84.framework.math.Vector3;

public class Player extends DynamicGameObject3D{
	GLGraphics glGraphics;
	
	public float walkingTime;
	Texture texture;
	Animation anime;
	SpriteBatcher spriteBatcher;
	
	int lengthW = 9; //アニメーション数。横に並んでる数。とりあえず9コマ
	int lengthH = 1; //アニメーション数。縦に並んでる数。
	int width  = 48; //1コマの幅
	int height = 96; //1コマの高さ
	public final float unitHeight = 2.0f;
	public final float unitWidth = 1.0f;
	
	public Player(GLGraphics glGraphics, float x, float y, float z){
		super(x,y,z);
		this.glGraphics = glGraphics;
		this.walkingTime = 0;
		
		spriteBatcher = new SpriteBatcher(glGraphics, 10);//とりあえず10個分
		
		texture = new Texture(
				glGraphics,
				new AndroidFileIO(GLGame.context.getAssets()),
				"player_move.png");
	}
	
	public void update(float deltaTime){
		//position.add(position)
		
		walkingTime += deltaTime; 
	}
	
	public void resume(){
		texture.reload();
		

		TextureRegion[] texRegion = new TextureRegion[lengthW*lengthH];
		
		for(int i=0; i < lengthH;  i++){
			for(int j=0; j < lengthW;  j++){	
				texRegion[i*j +j] 
					= new TextureRegion(texture, width*j, height*i, width, height );
			}
		}
		
		anime = new Animation(1f/15f, texRegion);//15分の1秒/コマ
	}
	
	public void draw(float cameraX, float cameraY, float cameraZ){
		GL10 gl = glGraphics.gl;
		TextureRegion keyFrame = anime.getKeyFrame(walkingTime, Animation.ANIMAION_LOOPING);
		gl.glPushMatrix();
		
	
		//ここから平面をカメラ方向に向けるためのベクトル計算いろいろ
		
		//カメラからオブジェクトへの方向ベクトル
		float CtoA_X = position.x +unitWidth/2.0f- cameraX;
		float CtoA_Y = position.y - cameraY;
		float CtoA_Z = position.z -unitWidth/2.0f- cameraZ;

		//↑のXZ平面への投影
		float XZtoO_X = CtoA_X;//position.x +unitWidth/2.0f - XZplane_X;
		float XZtoO_Y = 0 ;//b- XZplane_Y;
		float XZtoO_Z = CtoA_Z;//position.z -unitWidth/2.0f - XZplane_Z;
		
		//カメラを回転させない水平回転角0度の位置の真下Y=0の点
		float Xaxis_X = position.x +unitWidth/2.0f;
		float Xaxis_Z = 1;
		//↑からオブジェクトの真下への方向方向ベクトル
		float XatoO_X = position.x +unitWidth/2.0f - Xaxis_X;
		float XatoO_Z = position.z +unitWidth/2.0f - Xaxis_Z;
		
		
		//垂直方向のなす角
		float cos_c_V = (CtoA_X*XZtoO_X + CtoA_Y*XZtoO_Y + CtoA_Z*XZtoO_Z) /
			(FloatMath.sqrt(CtoA_X*CtoA_X + CtoA_Y*CtoA_Y +CtoA_Z*CtoA_Z) 
			*FloatMath.sqrt(XZtoO_X*XZtoO_X + XZtoO_Y*XZtoO_Y + XZtoO_Z*XZtoO_Z) );
		if(cos_c_V>1.0) cos_c_V = 1.0f;
		if(cos_c_V<-1.0) cos_c_V = -1.0f;
		float c_V= (float) Math.acos(cos_c_V);		
		//垂直方向は0〜90度しかとらないので回転方向は常に正
		
		//水平方向のなす角 Y
		float cos_c_H = (XZtoO_X*XatoO_X  + XZtoO_Z*XatoO_Z ) /
			(FloatMath.sqrt(XZtoO_X*XZtoO_X  +XZtoO_Z*XZtoO_Z)
			*FloatMath.sqrt(XatoO_X*XatoO_X +  XatoO_Z*XatoO_Z) );
		if(cos_c_H>1.0) cos_c_H = 1.0f;
		if(cos_c_H<-1.0) cos_c_H = -1.0f;
		float c_H= (float) Math.acos(cos_c_H); //回転方向はわからないけど角度は出る。
		//回転方向を求める。
		if(position.x+0.5f > cameraX)c_H = -c_H; //水平方向は単純にX座標の大小で回転方向を求められる
		
		//カメラからオブジェクトまでのベクトルをZY平面に投影したベクトル（X=0）
		float CtoZ_X = CtoA_X;
		float CtoZ_Y = CtoA_Y;
		float CtoZ_Z = 0;//CtoA_Z; 
	
		float cos_c_Y = (CtoA_X*CtoZ_X + CtoA_Y*CtoZ_Y + CtoA_Z*CtoZ_Z) /
				(FloatMath.sqrt(CtoA_X*CtoA_X + CtoA_Y*CtoA_Y +CtoA_Z*CtoA_Z) 
				*FloatMath.sqrt(CtoZ_X*CtoZ_X + CtoZ_Y*CtoZ_Y + CtoZ_Z*CtoZ_Z) );
			if(cos_c_Y>1.0) cos_c_V = 1.0f;
			if(cos_c_Y<-1.0) cos_c_V = -1.0f;
			float c_Y= (float) Math.acos(cos_c_V);	
	/*
		//V1, V2のなす角
		float cos_c_HH = (CtoZ_X*v2.x  + v.y*v2.y + v.z*v2.z)
				/(FloatMath.sqrt(CtoZ_X*CtoZ_X + v.y*v.y + v.z*v.z)
				*FloatMath.sqrt(v2.x*v2.x + v2.y*v2.y + v2.z*v2.z) );
		if(cos_c_HH>1.0) cos_c_HH = 1.0f;
		if(cos_c_HH<-1.0) cos_c_HH = -1.0f;
		float c_HH= (float) Math.acos(cos_c_HH);	
		float direction = (	//回転方向を求める
				position.x - cameraX)
				* (WorldRenderer.camera.getLookAt().z - cameraZ) 
				- (position.z - cameraZ) 
				  * (WorldRenderer.camera.getLookAt().x - cameraX);//回転方向を求める
		if(direction>0) c_HH = -c_HH;		
		c_HH *= Vector2.TO_DEGREES;
*/
		c_H *= Vector2.TO_DEGREES;
		c_V *= Vector2.TO_DEGREES;
		c_V = -c_V;
		c_Y *= Vector2.TO_DEGREES;
			
		//見た目を変えずに床、壁から離す→カメラ方向に動かして縮小する
		//オブジェクトからカメラへのベクトル
		float OtoC_X = -CtoA_X;
    		float OtoC_Y = -CtoA_Y;
		float OtoC_Z = -CtoA_Z;
		//その大きさ（スカラー）
		float Scalar = FloatMath.sqrt( OtoC_X*OtoC_X + OtoC_Y*OtoC_Y + OtoC_Z*OtoC_Z);
		//単位ベクトルにする
		OtoC_X /= Scalar;
		OtoC_Y /= Scalar;
		OtoC_Z /= Scalar;
		
		//カメラ方向への移動量
		float moveScala =  - unitHeight * FloatMath.cos( (90-c_V)*Vector2.TO_RADIANS ) ;
		float scale = 0.95f;//unitHeight * FloatMath.sin((90-c_V)*Vector2.TO_RADIANS );
		moveScala *= 1.3f; //微調整
		
		gl.glTranslatef(position.x + unitWidth/2.0f,
				position.y , position.z - unitWidth/2.0f); //半ユニット奥へ
		
		gl.glTranslatef(OtoC_X*moveScala, OtoC_Y*moveScala, OtoC_Z*moveScala);//壁にめり込まないくらい手前に動かす
		
		gl.glScalef(scale, scale, scale); //スケール変換。後で手前に動かすのでそれに合わせて小さくする
	
		
		gl.glRotatef(c_H, 0, 1, 0);
		gl.glRotatef(c_V, 1, 0, 0);
		gl.glRotatef(c_Y, 0, 0, 1);

		
		gl.glTranslatef(position.x + unitWidth/2.0f,
				position.y , position.z - unitWidth/2.0f); //半ユニット奥へ
		

		spriteBatcher.beginBatch(texture);
		spriteBatcher.drawSprite(0, 0, 0, 1, 2, keyFrame);
		spriteBatcher.endBatch();
		gl.glPopMatrix();
	}
}
